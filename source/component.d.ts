import { Store } from "./store.js";

/**
 * Represents the base class for all Reagenz components.
 * All Reagenz components are Web Components.
 */
export declare class Component extends HTMLElement {
	/**
	 * Creates a new instance of the Component.
	 *
	 * @param selectors An array containing the selector functions of the component.
	 */
	constructor(selectors?: Function[]);

	/**
	 * Dispatches the action in the injected store.
	 * A shorthand for this.dependencies.store.dispatch.
	 *
	 * @param action The Action object which should be dispatched
	 */
	dispatch(action: { type: string; [key: string]: any }): void;

	/**
	 * Get's executed when the component is added to the DOM.
	 * To prevent errors and memory leaks in Reagenz, use this function instead of connectedCallback.
	 */
	onConnect?(): void;

	/**
	 * Get's executed when the component is removed from the DOM.
	 * To prevent errors and memory leaks in Reagenz, use this function instead of disconnectedCallback.
	 */
	onDisconnect?(): void;

	/**
	 * The HTML of the component is generated by this function.
	 */
	render(): string;

	/**
	 * Returns the parsed attributes of the component as an object.
	 */
	useAttributes(): { [key: string]: any };

	/**
	 * Returns all injected dependencies as an object.
	 */
	useDependencies(): { [key: string]: any };

	/**
	 * Returns the result of all executed selectors as an object.
	 */
	useSelectorData(): { [key: string]: any };

	/** An object containing the attribute names and the desired types. */
	attributeTypes?: {
		[key: string]: Array | Boolean | Number | Object | String;
	};

	/**
	 * The dependency container generated by the dependency injection system of Reagenz.
	 * Access all your dependencies via this property.
	 */
	dependencies: {
		store?: Store;
		[key: string]: any;
	};

	/** An object containing the selectors and which name they should be available as. */
	selectors?: { [key: string]: any };

	/**
	 * The CSS returned by this function will be added automatically to a style-tag inside the component.
	 * Note that the CSS defined in this function will NOT be scoped, so it can affect any element outside this component too.
	 */
	styles?: string;
}
